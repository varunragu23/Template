{
	// Place your exercise workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Add Debug Headers": {
		"prefix": "_debug",
		"body": [
		  "",
		  "#ifdef DEBUG",
		  "#include \"lib/debug.h\"",
		  "#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)",
		  "#else",
		  "#define debug(...) 42",
		  "#endif",
		  ""
		],
		"description": "Add Debug Headers"
	  },
	  "Vishal CPP Template": {
		"prefix": "_cppvishal",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "int main() {",
		  "  cin.sync_with_stdio(0); cin.tie(0);",
		  "#ifndef ONLINE_JUDGE",
		  "  freopen(\"exercise.in\", \"r\", stdin);    ",
		  "  freopen(\"exercise.out\", \"w\", stdout); ",
		  "#endif",
		  "",
		  "  return 0;",
		  "}",
		  ""
		],
		"description": "Vishal CPP Template"
	  },
	  "Fast Random Access Map": {
		"prefix": "_fastmap",
		"body": [
		  "",
		  "struct custom_hash {",
		  "    static uint64_t splitmix64(uint64_t x) {",
		  "        // http://xorshift.di.unimi.it/splitmix64.c",
		  "        x += 0x9e3779b97f4a7c15;",
		  "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
		  "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
		  "        return x ^ (x >> 31);",
		  "    }",
		  "",
		  "    size_t operator()(uint64_t x) const {",
		  "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
		  "        return splitmix64(x + FIXED_RANDOM);",
		  "    }",
		  "};",
		  "unordered_map<long long, int, custom_hash> safe_map;",
		  "gp_hash_table<long long, int, custom_hash> safe_hash_table;",
		  ""
		],
		"description": "Fast Random Access Map"
	  },
	  "Add Ordered Set/Map (PBDS)": {
		"prefix": "_pbds",
		"body": [
		  "",
		  "#include <ext/pb_ds/assoc_container.hpp> ",
		  "#include <ext/pb_ds/tree_policy.hpp>",
		  "using namespace __gnu_pbds; ",
		  "  ",
		  "using ordered_set = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;",
		  "using ordered_map = tree<int, int, less<int>, rb_tree_tag, tree_order_statistics_node_update>;",
		  ""
		],
		"description": "Add Ordered Set/Map (PBDS)"
	  },
	  "Varun CPP Template": {
		"prefix": "_cppvarun",
		"body": [
		  "/*",
		  "ID: varunra2",
		  "LANG: C++",
		  "TASK: exercise",
		  "*/",
		  "",
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "#ifdef DEBUG",
		  "#include \"lib/debug.h\"",
		  "#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)",
		  "#else",
		  "#define debug(...) 42",
		  "#endif",
		  "",
		  "#define EPS 1e-9",
		  "#define IN(A, B, C) assert(B <= A && A <= C)",
		  "#define INF (int)1e9",
		  "#define MEM(a, b) memset(a, (b), sizeof(a))",
		  "#define MOD 1000000007",
		  "#define MP make_pair",
		  "#define PB push_back",
		  "#define all(cont) cont.begin(), cont.end()",
		  "#define rall(cont) cont.end(), cont.begin()",
		  "#define x first",
		  "#define y second",
		  "",
		  "const double PI = acos(-1.0);",
		  "typedef long long ll;",
		  "typedef long double ld;",
		  "typedef pair<int, int> PII;",
		  "typedef map<int, int> MPII;",
		  "typedef multiset<int> MSETI;",
		  "typedef set<int> SETI;",
		  "typedef set<string> SETS;",
		  "typedef vector<int> VI;",
		  "typedef vector<PII> VII;",
		  "typedef vector<VI> VVI;",
		  "typedef vector<string> VS;",
		  "",
		  "#define rep(i, a, b) for(int i = a; i < (b); ++i)",
		  "#define trav(a, x) for(auto& a : x)",
		  "#define sz(x) (int)(x).size()",
		  "typedef pair<int, int> pii;",
		  "typedef vector<int> vi;",
		  "",
		  "// util functions",
		  "",
		  "",
		  "int main() {",
		  "#ifndef ONLINE_JUDGE",
		  "  freopen(\"exercise.in\", \"r\", stdin);    ",
		  "  freopen(\"exercise.out\", \"w\", stdout); ",
		  "#endif",
		  "  cin.sync_with_stdio(0); cin.tie(0);",
		  "",
		  "  return 0;",
		  "}",
		  ""
		],
		"description": "Varun CPP Template"
	  },
	  "Fast HashTable": {
		"prefix": "_fasthashtable",
		"body": [
		  "",
		  "const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();",
		  "struct chash {",
		  "    int operator()(int x) const { return x ^ RANDOM; }",
		  "};",
		  "gp_hash_table<int, int, chash> table;",
		  ""
		],
		"description": "Fast HashTable"
	  }

}